//! Autogenerated weights for `pallet_music_styles`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-09-24, STEPS: `50`, REPEAT: 30, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! CPU: `Intel(R) Core(TM) i7-10700K CPU @ 3.80GHz`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// target/release/allfeat
// benchmark
// pallet
// --chain
// dev
// --pallet
// pallet_music_styles
// --extrinsic
// *
// --steps
// 50
// --repeat
// 30
// --output
// weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use frame_support::weights::constants::RocksDbWeight;
use sp_std::marker::PhantomData;

pub trait WeightInfo {
    fn add_style(n: u32, x: u32, ) -> Weight;
    fn add_sub_style(n: u32, x: u32, ) -> Weight;
}

impl WeightInfo for () {
    // Storage: MusicStyles Styles (r:1 w:1)
    /// The range of component `n` is `[1, 64]`.
    /// The range of component `x` is `[0, 50]`.
    fn add_style(n: u32, x: u32, ) -> Weight {
        Weight::default()
    }
    // Storage: MusicStyles Styles (r:1 w:1)
    /// The range of component `n` is `[1, 64]`.
    /// The range of component `x` is `[1, 50]`.
    fn add_sub_style(n: u32, x: u32, ) -> Weight {
        Weight::default()
    }
}
